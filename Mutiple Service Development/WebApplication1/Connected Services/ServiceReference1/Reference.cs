//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/countWords", ReplyAction="http://tempuri.org/IService1/countWordsResponse")]
        int countWords(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/countWords", ReplyAction="http://tempuri.org/IService1/countWordsResponse")]
        System.Threading.Tasks.Task<int> countWordsAsync(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindLatLon", ReplyAction="http://tempuri.org/IService1/FindLatLonResponse")]
        double[] FindLatLon(string zipcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindLatLon", ReplyAction="http://tempuri.org/IService1/FindLatLonResponse")]
        System.Threading.Tasks.Task<double[]> FindLatLonAsync(string zipcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Top10ContentWords", ReplyAction="http://tempuri.org/IService1/Top10ContentWordsResponse")]
        string Top10ContentWords(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Top10ContentWords", ReplyAction="http://tempuri.org/IService1/Top10ContentWordsResponse")]
        System.Threading.Tasks.Task<string> Top10ContentWordsAsync(string url);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WebApplication1.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WebApplication1.ServiceReference1.IService1>, WebApplication1.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int countWords(string url) {
            return base.Channel.countWords(url);
        }
        
        public System.Threading.Tasks.Task<int> countWordsAsync(string url) {
            return base.Channel.countWordsAsync(url);
        }
        
        public double[] FindLatLon(string zipcode) {
            return base.Channel.FindLatLon(zipcode);
        }
        
        public System.Threading.Tasks.Task<double[]> FindLatLonAsync(string zipcode) {
            return base.Channel.FindLatLonAsync(zipcode);
        }
        
        public string Top10ContentWords(string url) {
            return base.Channel.Top10ContentWords(url);
        }
        
        public System.Threading.Tasks.Task<string> Top10ContentWordsAsync(string url) {
            return base.Channel.Top10ContentWordsAsync(url);
        }
    }
}
